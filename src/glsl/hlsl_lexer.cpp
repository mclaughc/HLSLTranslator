#line 2 "hlsl_lexer.cpp"

#line 4 "hlsl_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if (defined(__STDC_VERSION__) || defined(_MSC_VER)) && (__STDC_VERSION >= 199901L || _MSC_VER >= 1800)

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE _mesa_hlsl_lexer_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via _mesa_hlsl_lexer_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void _mesa_hlsl_lexer_restart (FILE *input_file ,yyscan_t yyscanner );
void _mesa_hlsl_lexer__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE _mesa_hlsl_lexer__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void _mesa_hlsl_lexer__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void _mesa_hlsl_lexer__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void _mesa_hlsl_lexer_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void _mesa_hlsl_lexer_pop_buffer_state (yyscan_t yyscanner );

static void _mesa_hlsl_lexer_ensure_buffer_stack (yyscan_t yyscanner );
static void _mesa_hlsl_lexer__load_buffer_state (yyscan_t yyscanner );
static void _mesa_hlsl_lexer__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER _mesa_hlsl_lexer__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE _mesa_hlsl_lexer__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE _mesa_hlsl_lexer__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE _mesa_hlsl_lexer__scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *_mesa_hlsl_lexer_alloc (yy_size_t ,yyscan_t yyscanner );
void *_mesa_hlsl_lexer_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void _mesa_hlsl_lexer_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer _mesa_hlsl_lexer__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        _mesa_hlsl_lexer_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            _mesa_hlsl_lexer__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        _mesa_hlsl_lexer_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            _mesa_hlsl_lexer__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define _mesa_hlsl_lexer_wrap(yyscanner) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 276
#define YY_END_OF_BUFFER 277
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1229] =
    {   0,
        0,    0,   16,   16,    0,    0,  277,  275,    1,   22,
      275,  275,  275,  275,  275,  275,  275,  275,  175,  173,
      275,  275,  275,  274,  274,  274,  274,  275,  275,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  275,
        1,  275,   21,   16,   20,   21,   19,   17,   18,   14,
       13,    1,  157,  166,  158,  169,  163,  152,  165,  153,
      172,  177,  164,  178,  175,    0,    0,  175,    0,  173,
      173,  161,  154,  156,  155,  162,  274,  274,  274,  274,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  170,  160,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,   31,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,   35,  274,
      274,   59,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  171,  159,    1,    0,    0,    2,    0,
        0,    0,    0,   16,   15,   19,   18,    0,  177,    0,
        0,  176,    0,  178,    0,    0,    0,  179,  174,  167,
      168,  274,  274,  274,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  274,  186,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,   34,  274,  274,  274,  274,  274,  274,  274,  274,
       27,  274,  274,  274,  274,  274,  274,  274,  274,  274,
       60,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,    0,    0,    0,    0,   15,
        0,  177,  181,    0,  176,    0,    0,    0,  178,  182,

      179,    0,    0,  174,  274,  274,  274,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  274,  274,  274,   25,  274,  239,  232,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,   33,  189,
      274,  274,  274,  274,   66,  274,  274,  194,  207,  274,
      274,  274,  274,  274,   41,   42,   43,  274,  274,  274,
      274,  204,  235,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  192,  184,
      274,  274,   28,  274,  274,  274,  274,  274,  274,  150,

      274,  274,  274,    0,    0,    0,    0,    0,  176,  180,
      183,  274,  274,  274,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  273,
      274,  274,  274,   38,   39,   40,   29,  274,  274,  187,
      274,  274,   24,  274,  274,  274,  274,  274,  185,  274,
      208,   26,  225,  226,  227,  210,  211,  212,  237,  274,
      274,  274,   61,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  252,  274,  274,  274,  274,  274,  274,
      274,  274,  205,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,   44,   45,   46,  274,  188,  274,

      274,  234,  274,  274,   32,  274,    0,    0,    0,    0,
      244,  274,  274,    0,  258,    0,    0,    0,    0,  263,
        0,    0,    0,    0,    0,    0,    0,    0,  242,  274,
      274,  274,  274,  274,  240,  274,  274,  274,  206,  201,
      245,   47,   48,   49,  274,  274,  274,  274,  274,  274,
      197,  274,  274,  274,  151,  274,  274,  274,  274,  193,
      274,  274,  199,  274,  274,  274,   37,  274,  253,  231,
       67,  200,  149,  274,  243,  195,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,    0,    0,    0,    0,
      274,  274,    0,    0,  260,  261,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  274,  274,  255,  274,  274,
      274,  196,   36,  213,  214,  215,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  106,  107,  108,  274,  274,
      274,  274,  274,  236,  274,  274,  274,  274,  105,  274,
      274,  274,  274,  274,  274,  274,  256,  274,  190,  274,
      274,  274,  274,  274,   62,  274,  274,   63,  274,  274,
        0,    0,    0,    0,    0,  274,  274,  274,  274,  274,
      274,  257,    0,    0,    0,    0,    0,    0,    0,    0,
      271,  272,  274,  274,   64,  143,   30,  274,  274,  274,
      202,   50,   55,   57,   53,   51,   58,   54,   56,   52,

      117,  118,  119,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  198,  274,  274,
      274,  146,  251,  145,  274,  274,  274,  274,  274,  274,
      274,  191,  128,  129,  130,  274,  274,  209,  274,  144,
      274,    0,    0,    6,    0,    0,    0,   12,    3,  274,
      274,   69,   70,   71,  274,  259,  262,    0,    0,    0,
        0,    0,  270,  274,   23,  216,  219,  220,  221,  217,
      222,  223,  224,  218,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  115,  274,  274,  274,  110,  203,   65,
      274,  274,  274,  274,  274,  233,  274,  241,  238,  246,

      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  147,    0,    0,
        0,    0,    0,    0,  274,  274,  274,  274,  274,  274,
        0,    0,    0,    0,    0,  274,  274,  274,  126,  274,
      274,  121,  274,  274,  274,  274,  274,  274,  274,  274,
       80,   81,   82,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  254,  274,  274,  137,  274,
      274,  132,   86,   87,   88,  274,  274,    4,    0,    0,
        0,    0,    0,  274,  274,  274,  274,   92,   72,    0,
        0,    0,    0,  267,    0,  148,  274,  274,  274,  274,

      274,  274,  274,  274,  274,  274,  109,  274,  111,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,    0,    5,
        0,    0,    0,  274,  103,  274,  274,  274,    0,  264,
        0,    0,    0,  274,  274,  274,  120,  122,  274,  112,
      274,  113,  274,  274,  274,  274,  274,   93,  274,  274,
       83,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  131,  133,  274,  274,  274,
       94,  274,  274,   89,    0,    0,    0,  274,  274,  274,

      274,    0,    0,    0,    0,  123,  124,  274,  274,  274,
      139,  274,  274,  140,  274,  274,  274,  274,  274,  274,
      274,   68,  274,  274,  274,  274,  228,  274,  229,  274,
      274,  274,  134,  135,  274,  274,  274,  274,  274,  274,
      274,  274,    0,    0,    0,  274,   73,   74,  274,    0,
        0,    0,    0,  274,  274,  274,  274,  116,  114,  274,
      274,  274,  247,  249,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  248,
      250,  274,    0,    0,    0,    0,  274,  274,    0,    0,
        0,    0,  127,  125,  274,  274,   84,   85,  274,  274,

      274,   75,  274,  274,  274,   76,  274,  274,  274,  138,
      136,   90,   91,  274,  274,    0,    0,    0,    0,  274,
       98,    0,    0,  268,    0,  274,  274,  274,  274,  274,
      274,   95,  274,  274,  274,  274,  274,  274,    0,    0,
        0,    0,  274,    0,    0,    0,  274,  274,   96,   99,
      274,  274,  274,  274,   77,  274,   97,  100,    0,    0,
        0,    7,    0,    0,  274,    0,    0,    0,  141,  142,
      274,  274,  274,  274,  102,    0,    0,    8,    0,    0,
      274,    0,    0,    0,  274,  274,  230,  274,    0,    0,
        0,  274,    0,    0,  269,   78,   79,  274,    0,    0,

        0,    9,  274,  265,    0,  274,    0,    0,   10,  104,
        0,  101,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  266,    0,    0,   11,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    1,    8,    9,    1,   10,
       11,   12,   13,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   22,   22,   23,   23,   24,    1,   25,
       26,   27,    1,    1,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   35,   35,   37,   38,   35,   39,   35,
       35,   40,   41,   42,   43,   35,   35,   44,   35,   35,
       45,    1,   46,   47,   48,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   35,   65,   66,   67,   68,   69,   70,   71,
       72,   73,    1,   74,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    1,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    1,    1,    1,    4,    3,    3,
        3,    3,    3,    3,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    1
    } ;

static yyconst flex_int16_t yy_base[1236] =
    {   0,
        0,   73,   80,    0, 1587, 1586, 1588, 1591,   74, 1591,
     1561, 1560,  146, 1559,  143,  144,  142, 1558,  158,  215,
      141, 1557,  156,    0, 1514, 1532, 1527,  234,  142,  120,
       14,  135,  140,  134,  150, 1516,  143,  155,  155, 1525,
      157, 1509,  159,  162,  192,  189,  189,  165,  166,  197,
      262,  254, 1591,  248, 1591, 1560,  255, 1591,    0, 1591,
     1591,  261, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591,
     1591,  307, 1591,  351,  196,  332,  373, 1591,    0,    0,
     1591, 1549, 1591, 1591, 1591, 1548,    0, 1519, 1511, 1500,
     1505, 1520, 1508,  216, 1504, 1517, 1502, 1499, 1510, 1513,

     1499, 1496, 1591, 1591, 1492, 1497,  223, 1494, 1503, 1489,
     1486, 1491, 1503,  231, 1497, 1484, 1481, 1482, 1479, 1479,
     1485,  237,  240, 1479, 1490, 1475, 1481, 1485,    0, 1478,
     1489,  246, 1488, 1464,  242, 1483, 1473,  253, 1466,  268,
     1479, 1481,  271, 1460, 1468, 1465, 1454, 1463,  267,  272,
     1468, 1456, 1462, 1465, 1453, 1456,  182,  277,  299, 1454,
      285, 1461, 1460, 1591, 1591,  355,  363,  373, 1591, 1445,
     1458, 1449, 1460,  277,    0,  380,    0,  426, 1591, 1479,
     1457,  375,  437, 1591, 1477, 1455,  444,  451,  278, 1591,
     1591, 1454, 1443, 1439, 1456, 1444, 1454, 1474, 1438, 1437,

     1428, 1466, 1444, 1444, 1434,  312, 1428, 1436,    0, 1431,
     1426, 1430, 1440,  353, 1434, 1420, 1420, 1432, 1423,  312,
     1434, 1431, 1431, 1427, 1418, 1425, 1411, 1409, 1422, 1407,
     1424,    0, 1421, 1408, 1416, 1413, 1419, 1412, 1409, 1397,
      456, 1415, 1402, 1399, 1406, 1396, 1402, 1405, 1395, 1403,
        0, 1396, 1387, 1402, 1401, 1391, 1398,  346, 1381, 1400,
     1383, 1381, 1392, 1381, 1376, 1374, 1376, 1387, 1372, 1384,
     1373, 1370, 1382, 1381, 1384, 1365,  356, 1374, 1369, 1367,
     1356, 1375, 1377, 1365, 1357, 1356, 1360, 1372, 1355,    0,
      472,  479, 1591,  500, 1591, 1386, 1364,  507,  523, 1591,

     1591, 1384, 1362, 1591, 1362, 1354, 1345, 1350, 1351, 1343,
      355, 1349, 1344,  121, 1336, 1354, 1337, 1340, 1340, 1336,
     1355, 1331, 1342, 1341,  459, 1338,    0,    0, 1342, 1330,
     1328, 1328, 1329, 1324, 1333, 1321, 1339, 1327,    0,    0,
     1321, 1332, 1331, 1331,    0, 1315,  462,    0,  466, 1317,
     1325, 1326, 1316, 1310,    0,    0,    0, 1311, 1310, 1310,
     1305,    0,    0, 1304, 1305, 1310, 1304, 1315, 1310, 1310,
     1308, 1307, 1300, 1294, 1296, 1295, 1298, 1298, 1290, 1293,
     1288, 1297, 1302, 1289, 1286, 1299, 1295, 1288,    0,    0,
     1295, 1291,  487, 1282, 1282, 1288, 1278, 1286, 1283,    0,

     1272, 1285, 1284, 1283, 1282, 1279, 1267,  530,  545, 1591,
     1591, 1267, 1278, 1265, 1278, 1282, 1260, 1266, 1253, 1275,
     1277, 1260, 1250, 1256, 1262, 1267, 1252, 1256, 1262, 1591,
     1261, 1262, 1262,    0,    0,    0,    0, 1258, 1247,    0,
     1256, 1246,    0, 1245, 1246, 1240, 1251, 1241,    0, 1237,
        0,  515,    0,    0,    0,    0,    0,    0,    0, 1248,
      551, 1247,    0, 1245, 1241, 1237, 1229, 1234, 1230, 1236,
     1226, 1239, 1223,    0, 1223, 1237, 1225, 1221, 1228, 1222,
     1234, 1229,    0, 1227, 1224, 1228, 1211, 1209, 1212, 1219,
     1221, 1224, 1219, 1218,    0,    0,    0, 1205,    0, 1207,

     1208,    0, 1205, 1209,    0, 1202, 1202, 1261, 1201, 1204,
        0, 1195, 1206, 1202, 1591, 1204, 1210, 1209, 1187, 1591,
     1187, 1188, 1186, 1199, 1196, 1195, 1187, 1194,    0, 1197,
     1176, 1178, 1185, 1179,    0, 1172, 1172, 1186,  538, 1188,
        0, 1165, 1164, 1163,  555, 1202, 1201, 1200, 1162, 1161,
        0, 1179, 1178, 1173,    0, 1161, 1175, 1161, 1158,    0,
     1164,  361,    0, 1160, 1168, 1167,    0, 1159, 1151,    0,
        0,    0,    0, 1148,    0,    0, 1149, 1146, 1158,  568,
     1150, 1157, 1156, 1153, 1147, 1144, 1139,  589, 1155, 1140,
      395,  574, 1156, 1139, 1591, 1591, 1147, 1132, 1135, 1144,

     1147, 1153, 1139, 1147, 1146, 1123, 1123,    0, 1137, 1121,
     1134,    0,    0, 1115, 1114, 1113, 1123,  581,  594,  597,
     1151, 1150, 1149, 1111, 1110,  393,  591,    0, 1123, 1126,
     1124, 1112, 1108,    0, 1121, 1118, 1117, 1106,    0, 1105,
     1095, 1113, 1098, 1101,  603, 1106,    0, 1109,    0, 1130,
     1129, 1128, 1090, 1089,    0, 1104, 1090,    0, 1101, 1093,
     1095,  622,  634, 1149, 1088, 1086, 1081, 1116, 1115, 1114,
     1076, 1591, 1097, 1096, 1076, 1075, 1073, 1071, 1084, 1090,
     1591, 1591, 1078, 1081,    0,    0,    0,  607,  626,  629,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

     1105,  630,    0, 1078, 1081, 1065, 1073, 1063, 1086, 1073,
     1069, 1064, 1054, 1052, 1037,  642, 1050,    0, 1051, 1039,
     1038,    0,    0,    0, 1034, 1067, 1066, 1065, 1027, 1023,
     1031,    0, 1064,  635,    0, 1037, 1040,    0,  658,    0,
     1017, 1025,  677, 1591,  679,    0,  687,  662, 1591, 1026,
     1037, 1057,  273,    0, 1034, 1591, 1591, 1014, 1014, 1014,
     1026, 1016, 1591, 1013,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1009, 1008, 1031,  138,  226,  278,
      276,  309,  298,  353,  331,  340,  369,  396,    0,    0,
      399,  400,  407,  373,  384,    0,  386,    0,    0,    0,

      548,  683,  463,  454,  443,  462,  466,  467,  496,  485,
      500,  502,  530,  541,  548,  522,  527,    0,  534,  597,
      682,  578,  577,  570,  574,  592,  600,  602,  628,  621,
      635,  625,  635,  666,  630,  635,  648,  650,  688,  666,
      665,  691,  671,  670,  677,  662,  661,  677,  665,  666,
      704,  705,    0,  680,  685,  679,  672,  682,  674,  699,
      688,  686,  691,  693,  694,    0,  683,  684,  722,  700,
      699,  725,  726,  727,    0,  702,  707, 1591,  752,  757,
      730,  712,  696,  715,  713,  703,  704,    0,  742,  704,
      726,  710,  714, 1591,  735,    0,  727,  728,  713,  712,

      715,  716,  710,  720,  712,  720,    0,  723,    0,  722,
      723,  724,  749,  738,  738,  740,  725,  730,  747,  732,
      770,  748,  751,  750,  774,  738,  755,  756,  741,  740,
      743,  744,  745,  746,  771,  760,  760,  763,  815, 1591,
      785,  752,  764,  757,    0,  774,  775,  760,  769, 1591,
      765,  765,  776,  758,  759,  767,    0,    0,  768,  793,
      765,  795,  788,  768,  790,  775,  776,  814,  792,  791,
      817,  793,  798,  796,  800,  785,  784,  800,  786,  789,
      799,  794,  785,  786,  794,    0,    0,  795,  796,  797,
      835,  813,  812,  838,  830,  813,  808,  813,  799,  800,

      808,  811,  836,  825,  822,    0,    0,  829,  830,  824,
        0,  825,  810,    0,  811,  835,  836,  821,  820,  823,
      824,    0,  818,  828,  820,  828,  853,  832,    0,  831,
      848,  849,    0,    0,  850,  851,  852,  853,  838,  837,
      840,  841,  905,  906,  852,  844,    0,    0,  862,  850,
      849,  855,  872,  845,  846,  870,  871,    0,    0,  849,
      850,  858,    0,    0,  859,  884,  856,  886,  879,  873,
      860,  882,  880,  873,  862,  863,  864,  865,  873,    0,
        0,  874,  938,  939,  940,  870,  881,  873,  916,  880,
      902,  884,    0,    0,  899,  900,    0,    0,  904,  905,

      899,    0,  900,  885,  909,    0,  887,  897,  922,    0,
        0,    0,    0,  913,  914,  902,  963,  912,  914,  906,
        0,  906,  913, 1591,  922,  909,  910,  903,  904,  928,
      929,    0,  927,  939,  911,  950,  911,  912,  916,  932,
      985,  987,  947,  922,  930,  937,  923,  924,    0,    0,
      946,  947,  937,  945,    0,  961,    0,    0,  955, 1003,
     1004, 1591, 1006, 1005,  942,  948,  954,  959,    0,    0,
      950,  954,  948,  970,    0,  955, 1019, 1591, 1020,  969,
      975,  958,  954,  982,  959,  962,    0,  981,  977,  981,
     1034,  970,  992,  990, 1591,    0,    0,  977,  992, 1040,

     1041, 1591,  991, 1591,  979,  977,  986, 1047, 1591,    0,
      993,    0,  986,  991, 1053,  994, 1055, 1057,  994, 1059,
     1002, 1018, 1006, 1591, 1065, 1067, 1591, 1591, 1108, 1110,
     1112, 1067, 1116, 1068, 1120
    } ;

static yyconst flex_int16_t yy_def[1236] =
    {   0,
     1228,    1, 1228,    3, 1229, 1229, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1230, 1230, 1230, 1230, 1228, 1228, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1231, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228,   19, 1228, 1228, 1228, 1232,   20,
     1228, 1228, 1228, 1228, 1228, 1228, 1230, 1230, 1230, 1230,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,

     1228, 1228, 1228, 1228, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1233, 1228, 1231, 1228, 1228, 1228,
     1228,   74, 1228, 1228, 1228, 1228, 1228, 1228, 1232, 1228,
     1228, 1230, 1230, 1230, 1228, 1228, 1228, 1228, 1228, 1228,

     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1228, 1228, 1228, 1228, 1233,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,

     1228, 1228, 1228, 1228, 1230, 1230, 1230, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,

     1230, 1230, 1230, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1230, 1230, 1230, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,

     1230, 1230, 1230, 1230, 1230, 1230, 1228, 1228, 1228, 1228,
     1230, 1230, 1230, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1228, 1228, 1228, 1228,
     1230, 1230, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,

     1228, 1228, 1228, 1228, 1228, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1228, 1228, 1228, 1228, 1228, 1230, 1230, 1230, 1230, 1230,
     1230, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,

     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1228, 1228, 1228, 1228, 1234, 1228, 1228, 1228, 1230,
     1230, 1230, 1230, 1230, 1230, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,

     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1228, 1235,
     1234, 1228, 1228, 1228, 1230, 1230, 1230, 1230, 1230, 1230,
     1228, 1228, 1228, 1228, 1228, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1228, 1235, 1228,
     1228, 1228, 1228, 1230, 1230, 1230, 1230, 1230, 1230, 1228,
     1228, 1228, 1228, 1228, 1228, 1230, 1230, 1230, 1230, 1230,

     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1228, 1228,
     1228, 1228, 1228, 1230, 1230, 1230, 1230, 1230, 1228, 1228,
     1228, 1228, 1228, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1228, 1228, 1228, 1230, 1230, 1230,

     1230, 1228, 1228, 1228, 1228, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1228, 1228, 1228, 1230, 1230, 1230, 1230, 1228,
     1228, 1228, 1228, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1228, 1228, 1228, 1228, 1230, 1230, 1228, 1228,
     1228, 1228, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,

     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1228, 1228, 1228, 1228, 1230,
     1230, 1228, 1228, 1228, 1228, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1228, 1228,
     1228, 1228, 1230, 1228, 1228, 1228, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1228, 1228,
     1228, 1228, 1228, 1228, 1230, 1228, 1228, 1228, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1228, 1228, 1228, 1228, 1228,
     1230, 1228, 1228, 1228, 1230, 1230, 1230, 1230, 1228, 1228,
     1228, 1230, 1228, 1228, 1228, 1230, 1230, 1230, 1228, 1228,

     1228, 1228, 1230, 1228, 1228, 1230, 1228, 1228, 1228, 1230,
     1228, 1230, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1228,    0, 1228, 1228,
     1228, 1228, 1228, 1228, 1228
    } ;

static yyconst flex_int16_t yy_nxt[1666] =
    {   0,
        8,    9,   10,    9,   11,    8,    8,   12,   13,    8,
        8,   14,   15,   16,   17,   18,   19,   20,   20,   20,
       20,   20,   20,    8,   21,   22,   23,   24,   25,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       26,   27,   24,   24,   28,    8,   29,   24,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   24,   24,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       24,   24,   24,   50,   51,   62,  108,   62,  109,   52,
       53,   54,   55,   54,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   56,   53,   57,   57,   57,

       57,   57,   57,   58,   53,   53,   53,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   53,   53,   53,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   53,   65,   68,  422,   70,   72,   72,
       72,   72,   72,   72,   72,   82,   83,  103,   69,   71,
      105,   66,   74,  423,   75,   75,   75,   75,   75,   75,
       76,   85,   86,  110,  111,  106,  107,  112,  104,   77,
      840,  127,  115,  118,  113,  119,  116,  114,  121,  128,

       78,   79,  117,  134,  120,  137,  122,  140,  129,  123,
       77,  130,  124,  160,  143,  131,  132,  135,  125,  138,
      133,  162,  164,  141,  144,   78,  142,  161,   79,   74,
      163,   80,   80,   80,   80,   80,   80,   80,  152, 1228,
      145,  153,  275,  276,  154,  157,   77,  146,  147,  174,
      158,  174,  148,  155,  159,  168,  169,   81,  149,  150,
      156,  151,   62,  166,   62,   62, 1228,   77,  167,  198,
      165,  176,  176,  176,  176,  176,  176,  176,  174,  841,
      174,  199,   81,   91,   92,  210,  218,   93,  230,  211,
       94,  219,  220,   95,   96,   97,  228,   98,   99,  100,

      828,  101,  231,  245,  102,  239,  170,  229,  240,  249,
      829,  246,  241,  171,  242,  265,  250,  172,  252,  257,
      304,  267,  173,   72,   72,   72,   72,   72,   72,   72,
      842,  266,  253,  277,  254,  268,  258,  259,  178,  179,
      843,  282,  278,  180,  283,  304,   74,  279,   76,   76,
       76,   76,   76,   76,   76,  280,  166,  844,   62,  178,
      179,  167,  845,   77,  168,  169,  181,  182,  182,  182,
      182,  182,  182,  182,  168,  169,  319,  334,  335,  320,
      846,  847,  183,  184,   77,  187,  187,  185,  848,  188,
      188,  188,  188,  188,  188,  188,  176,  176,  176,  176,

      176,  176,  176,  183,  184,  327,  294,  295,  374,  394,
      186,  296,  375,  639,  418,  170,  419,  640,  395,  328,
      706,  849,  171,  850,  666,  170,  172,  294,  295,  851,
      852,  173,  171,  707,  297,  667,  172,  853,  291,  291,
      854,  173,  292,  292,  292,  292,  292,  292,  292,  298,
      298,  855,  856,  299,  299,  299,  299,  299,  299,  299,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  355,  356,  357,  434,  435,  436,
      453,  454,  455,  301,  456,  457,  458,  302,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,

      292,  292,  863,  864,  301,  495,  496,  497,  358,  865,
      303,  179,  408,  408,  866,  180,  409,  409,  409,  409,
      409,  409,  409,  299,  299,  299,  299,  299,  299,  299,
      867,  868,  179,  542,  543,  544,  869,  870,  181,  299,
      299,  299,  299,  299,  299,  299,  409,  409,  409,  409,
      409,  409,  409,  871,  872,  184,  614,  615,  616,  185,
      873,  409,  409,  409,  409,  409,  409,  409,  546,  547,
      548,  874,  621,  622,  623,  857,  184,  295,  875,  549,
      550,  296,  186,  624,  625,  650,  651,  652,  858,  876,
      588,  668,  669,  670,  877,  878,  653,  654,  295,  692,

      693,  694,  880,  671,  297,  662,  663,  663,  663,  663,
      663,  663,  695,  696,  697,  698,  699,  700,  708,  881,
      726,  727,  728,  743,  744,  766,  767,  768,  709,  882,
      710,  711,  729,  883,  730,  743,  744,  884,  745,  745,
      745,  745,  745,  745,  769,  770,  771,  772,  773,  774,
      747,  747,  747,  747,  747,  747,  747,  776,  885,  791,
      792,  793,  808,  748,  886,  746,  887,  777,  888,  778,
      794,  795,  809,  889,  810,  813,  814,  815,  743,  744,
      743,  744,  820,  743,  744,  890,  816,  817,  743,  744,
      891,  892,  746,  895,  893,  745,  745,  745,  745,  745,

      745,  896,  822,  747,  747,  747,  747,  747,  747,  747,
      859,  894,  897,  823,  898,  899,  900,  901,  902,  903,
      860,  904,  861,  862,  824,  905,  906,  907,  908,  909,
      910,  911,  912,  915,  916,  917,  918,  919,  920,  921,
      922,  923,  913,  924,  914,  925,  926,  927,  928,  929,
      930,  931,  932,  933,  934,  937,  938,  880,  939,  940,
      941,  942,  943,  944,  935,  945,  936,  946,  947,  948,
      949,  950,  951,  952,  953,  954,  955,  956,  957,  958,
      959,  960,  961,  962,  963,  964,  965,  966,  967,  968,
      969,  970,  971,  972,  973,  974,  975,  976,  977,  978,

      979,  980,  982,  983,  984,  985,  986,  987,  988,  989,
      990,  991,  992,  993,  981,  994,  939,  940,  995,  996,
      997,  998,  999, 1000, 1001, 1002, 1003, 1004, 1005, 1006,
     1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016,
     1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026,
     1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036,
     1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
     1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,
     1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066,
     1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076,

     1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1086, 1087,
     1088, 1089, 1090, 1091, 1092, 1085, 1093, 1094, 1095, 1096,
     1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106,
     1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1083,
     1084, 1117, 1119, 1120, 1121, 1122, 1123, 1124, 1085, 1125,
     1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135,
     1136, 1137, 1138, 1139, 1117, 1140, 1142, 1143, 1144, 1145,
     1146, 1147, 1148, 1141, 1149, 1150, 1151, 1152, 1153, 1154,
     1155, 1156, 1157, 1158, 1159, 1160, 1161, 1165, 1163, 1166,
     1167, 1168, 1169, 1170, 1116, 1162, 1164, 1171, 1172, 1173,

     1174, 1175, 1118, 1176, 1177, 1161, 1179, 1163, 1181, 1182,
     1183, 1184, 1185, 1178, 1162, 1164, 1186, 1187, 1188, 1189,
     1177, 1179, 1190, 1192, 1193, 1118, 1194, 1195, 1196, 1178,
     1191, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1205, 1206,
     1207, 1208, 1201, 1210, 1202, 1211, 1212, 1213, 1208, 1214,
     1209, 1202, 1215, 1216, 1217, 1219, 1217, 1209, 1220, 1222,
     1220, 1223, 1218, 1224, 1218, 1225, 1226, 1180, 1226,  189,
      821,  839,  838,  837,  836, 1227,  835, 1227,  834,  833,
      832,  831, 1180,  830,  827,  826,  825,  819,  818,  812,
      811,  807,  806,  805,  804,  803,  802,  801,  800,  799,

      798,  797,  796,  790,  789, 1221,  788, 1221,   60,   60,
       60,   60,   87,   87,  177,  177,  290,  787,  290,  290,
      879,  879,  879,  879,  786,  785,  784,  783,  782,  781,
      780,  779,  775,  765,  764,  763,  762,  761,  760,  759,
      758,  757,  756,  755,  754,  753,  752,  751,  750,  749,
      748,  742,  741,  740,  739,  738,  737,  736,  735,  734,
      733,  732,  731,  725,  724,  723,  722,  721,  720,  719,
      718,  717,  716,  715,  714,  713,  712,  705,  704,  703,
      702,  701,  691,  690,  689,  688,  687,  686,  685,  684,
      683,  682,  681,  680,  679,  678,  677,  676,  675,  674,

      673,  672,  665,  664,  661,  660,  659,  658,  657,  656,
      655,  649,  648,  647,  646,  645,  644,  643,  642,  641,
      638,  637,  636,  635,  634,  633,  632,  631,  630,  629,
      628,  627,  626,  620,  619,  618,  617,  613,  612,  611,
      610,  609,  608,  607,  606,  605,  604,  603,  602,  601,
      600,  599,  598,  597,  596,  595,  594,  593,  592,  591,
      590,  589,  588,  587,  586,  585,  584,  583,  582,  581,
      580,  579,  578,  577,  576,  575,  574,  573,  572,  571,
      570,  569,  568,  567,  566,  565,  564,  563,  562,  561,
      560,  559,  558,  557,  556,  555,  554,  553,  552,  551,

      545,  541,  540,  539,  538,  537,  536,  535,  534,  533,
      532,  531,  530,  529,  528,  527,  526,  525,  524,  523,
      522,  521,  520,  519,  518,  517,  516,  515,  514,  513,
      512,  511,  510,  509,  508,  507,  506,  505,  504,  503,
      502,  501,  500,  499,  498,  494,  493,  492,  491,  490,
      489,  488,  487,  486,  485,  484,  483,  482,  481,  480,
      479,  478,  477,  476,  475,  474,  473,  472,  471,  470,
      469,  468,  467,  466,  465,  464,  463,  462,  461,  460,
      459,  452,  451,  450,  449,  448,  447,  446,  445,  444,
      443,  442,  441,  440,  439,  438,  437,  433,  432,  431,

      430,  429,  428,  427,  426,  425,  424,  421,  420,  417,
      416,  415,  414,  413,  412,  411,  411,  410,  410,  407,
      406,  405,  404,  403,  402,  401,  400,  399,  398,  397,
      396,  393,  392,  391,  390,  389,  388,  387,  386,  385,
      384,  383,  382,  381,  380,  379,  378,  377,  376,  373,
      372,  371,  370,  369,  368,  367,  366,  365,  364,  363,
      362,  361,  360,  359,  354,  353,  352,  351,  350,  349,
      348,  347,  346,  345,  344,  343,  342,  341,  340,  339,
      338,  337,  336,  333,  332,  331,  330,  329,  326,  325,
      324,  323,  322,  321,  318,  317,  316,  315,  314,  313,

      312,  311,  310,  309,  308,  307,  306,  305,  300,  300,
      293,  293,  289,  288,  287,  286,  285,  284,  281,  274,
      273,  272,  271,  270,  269,  264,  263,  262,  261,  260,
      256,  255,  251,  248,  247,  244,  243,  238,  237,  236,
      235,  234,  233,  232,  227,  226,  225,  224,  223,  222,
      221,  217,  216,  215,  214,  213,  212,  209,  208,  207,
      206,  205,  204,  203,  202,  201,  200,  197,  196,  195,
      194,  193,  192,  191,  190,  175,  139,  136,  126,   90,
       89,   88,   84,   73,   67,   64,   63, 1228,   61,   61,
        7, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,

     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228
    } ;

static yyconst flex_int16_t yy_chk[1666] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    2,    9,   31,    9,   31,    2,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,   13,   15,  314,   16,   17,   17,
       17,   17,   17,   17,   17,   21,   21,   29,   15,   16,
       30,   13,   19,  314,   19,   19,   19,   19,   19,   19,
       19,   23,   23,   32,   32,   30,   30,   32,   29,   19,
      778,   37,   33,   34,   32,   34,   33,   32,   35,   37,

       19,   19,   33,   39,   34,   41,   35,   43,   38,   35,
       19,   38,   35,   48,   44,   38,   38,   39,   35,   41,
       38,   49,   50,   43,   44,   19,   43,   48,   19,   20,
       49,   20,   20,   20,   20,   20,   20,   20,   46,   75,
       45,   46,  157,  157,   46,   47,   20,   45,   45,   54,
       47,   54,   45,   46,   47,   52,   52,   20,   45,   45,
       46,   45,   62,   51,   62,   51,   75,   20,   51,   94,
       50,   57,   57,   57,   57,   57,   57,   57,  174,  779,
      174,   94,   20,   28,   28,  107,  114,   28,  123,  107,
       28,  114,  114,   28,   28,   28,  122,   28,   28,   28,

      753,   28,  123,  135,   28,  132,   52,  122,  132,  138,
      753,  135,  132,   52,  132,  149,  138,   52,  140,  143,
      189,  150,   52,   72,   72,   72,   72,   72,   72,   72,
      780,  149,  140,  158,  140,  150,  143,  143,   72,   72,
      781,  161,  158,   72,  161,  189,   76,  159,   76,   76,
       76,   76,   76,   76,   76,  159,  166,  782,  166,   72,
       72,  166,  783,   76,  167,  167,   72,   74,   74,   74,
       74,   74,   74,   74,  168,  168,  206,  220,  220,  206,
      784,  785,   74,   74,   76,   77,   77,   74,  786,   77,
       77,   77,   77,   77,   77,   77,  176,  176,  176,  176,

      176,  176,  176,   74,   74,  214,  182,  182,  258,  277,
       74,  182,  258,  562,  311,  167,  311,  562,  277,  214,
      626,  787,  167,  788,  591,  168,  167,  182,  182,  791,
      792,  167,  168,  626,  182,  591,  168,  793,  178,  178,
      794,  168,  178,  178,  178,  178,  178,  178,  178,  183,
      183,  795,  797,  183,  183,  183,  183,  183,  183,  183,
      187,  187,  187,  187,  187,  187,  187,  188,  188,  188,
      188,  188,  188,  188,  241,  241,  241,  325,  325,  325,
      347,  347,  347,  188,  349,  349,  349,  188,  291,  291,
      291,  291,  291,  291,  291,  292,  292,  292,  292,  292,

      292,  292,  803,  804,  188,  393,  393,  393,  241,  805,
      188,  292,  294,  294,  806,  292,  294,  294,  294,  294,
      294,  294,  294,  298,  298,  298,  298,  298,  298,  298,
      807,  808,  292,  452,  452,  452,  809,  810,  292,  299,
      299,  299,  299,  299,  299,  299,  408,  408,  408,  408,
      408,  408,  408,  811,  812,  299,  539,  539,  539,  299,
      813,  409,  409,  409,  409,  409,  409,  409,  461,  461,
      461,  814,  545,  545,  545,  801,  299,  409,  815,  461,
      461,  409,  299,  545,  545,  580,  580,  580,  801,  816,
      588,  592,  592,  592,  817,  819,  580,  580,  409,  618,

      618,  618,  820,  592,  409,  588,  588,  588,  588,  588,
      588,  588,  619,  619,  619,  620,  620,  620,  627,  822,
      645,  645,  645,  662,  662,  688,  688,  688,  627,  823,
      627,  627,  645,  824,  645,  663,  663,  825,  662,  662,
      662,  662,  662,  662,  689,  689,  689,  690,  690,  690,
      663,  663,  663,  663,  663,  663,  663,  702,  826,  716,
      716,  716,  734,  748,  827,  662,  828,  702,  829,  702,
      716,  716,  734,  830,  734,  739,  739,  739,  743,  743,
      745,  745,  743,  821,  821,  831,  739,  739,  747,  747,
      832,  833,  662,  835,  834,  745,  745,  745,  745,  745,

      745,  836,  748,  747,  747,  747,  747,  747,  747,  747,
      802,  834,  837,  748,  838,  839,  840,  841,  842,  843,
      802,  844,  802,  802,  748,  845,  846,  847,  848,  849,
      850,  851,  852,  854,  855,  856,  857,  858,  859,  860,
      861,  862,  852,  863,  852,  864,  865,  867,  868,  869,
      870,  871,  872,  873,  874,  876,  877,  879,  880,  880,
      881,  882,  883,  884,  874,  885,  874,  886,  887,  889,
      890,  891,  892,  893,  895,  897,  898,  899,  900,  901,
      902,  903,  904,  905,  906,  908,  910,  911,  912,  913,
      914,  915,  916,  917,  918,  919,  920,  921,  922,  923,

      924,  925,  926,  927,  928,  929,  930,  931,  932,  933,
      934,  935,  936,  937,  925,  938,  939,  939,  941,  942,
      943,  944,  946,  947,  948,  949,  951,  952,  953,  954,
      955,  956,  959,  960,  961,  962,  963,  964,  965,  966,
      967,  968,  969,  970,  971,  972,  973,  974,  975,  976,
      977,  978,  979,  980,  981,  982,  983,  984,  985,  988,
      989,  990,  991,  992,  993,  994,  995,  996,  997,  998,
      999, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1010,
     1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023,
     1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1035, 1036,

     1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
     1049, 1050, 1051, 1052, 1053, 1044, 1054, 1055, 1056, 1057,
     1060, 1061, 1062, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
     1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1082, 1083,
     1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1084, 1092,
     1095, 1096, 1099, 1100, 1101, 1103, 1104, 1105, 1107, 1108,
     1109, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1122, 1123,
     1125, 1126, 1127, 1118, 1128, 1129, 1130, 1131, 1133, 1134,
     1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1142, 1144,
     1145, 1146, 1147, 1148, 1083, 1141, 1142, 1151, 1152, 1153,

     1154, 1156, 1085, 1159, 1160, 1161, 1164, 1163, 1165, 1166,
     1167, 1168, 1171, 1160, 1161, 1163, 1172, 1173, 1174, 1176,
     1177, 1179, 1180, 1181, 1182, 1117, 1183, 1184, 1185, 1177,
     1180, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1198,
     1199, 1200, 1201, 1203, 1191, 1205, 1206, 1207, 1208, 1211,
     1200, 1201, 1213, 1214, 1215, 1216, 1217, 1208, 1218, 1219,
     1220, 1221, 1215, 1222, 1217, 1223, 1225, 1164, 1226, 1232,
     1234,  777,  776,  775,  764, 1225,  762, 1226,  761,  760,
      759,  758, 1179,  755,  752,  751,  750,  742,  741,  737,
      736,  733,  731,  730,  729,  728,  727,  726,  725,  721,

      720,  719,  717,  715,  714, 1218,  713, 1220, 1229, 1229,
     1229, 1229, 1230, 1230, 1231, 1231, 1233,  712, 1233, 1233,
     1235, 1235, 1235, 1235,  711,  710,  709,  708,  707,  706,
      705,  704,  701,  684,  683,  680,  679,  678,  677,  676,
      675,  674,  673,  671,  670,  669,  668,  667,  666,  665,
      664,  661,  660,  659,  657,  656,  654,  653,  652,  651,
      650,  648,  646,  644,  643,  642,  641,  640,  638,  637,
      636,  635,  633,  632,  631,  630,  629,  625,  624,  623,
      622,  621,  617,  616,  615,  614,  611,  610,  609,  607,
      606,  605,  604,  603,  602,  601,  600,  599,  598,  597,

      594,  593,  590,  589,  587,  586,  585,  584,  583,  582,
      581,  579,  578,  577,  574,  569,  568,  566,  565,  564,
      561,  559,  558,  557,  556,  554,  553,  552,  550,  549,
      548,  547,  546,  544,  543,  542,  540,  538,  537,  536,
      534,  533,  532,  531,  530,  528,  527,  526,  525,  524,
      523,  522,  521,  519,  518,  517,  516,  514,  513,  512,
      510,  509,  508,  507,  506,  504,  503,  501,  500,  498,
      494,  493,  492,  491,  490,  489,  488,  487,  486,  485,
      484,  482,  481,  480,  479,  478,  477,  476,  475,  473,
      472,  471,  470,  469,  468,  467,  466,  465,  464,  462,

      460,  450,  448,  447,  446,  445,  444,  442,  441,  439,
      438,  433,  432,  431,  429,  428,  427,  426,  425,  424,
      423,  422,  421,  420,  419,  418,  417,  416,  415,  414,
      413,  412,  407,  406,  405,  404,  403,  402,  401,  399,
      398,  397,  396,  395,  394,  392,  391,  388,  387,  386,
      385,  384,  383,  382,  381,  380,  379,  378,  377,  376,
      375,  374,  373,  372,  371,  370,  369,  368,  367,  366,
      365,  364,  361,  360,  359,  358,  354,  353,  352,  351,
      350,  346,  344,  343,  342,  341,  338,  337,  336,  335,
      334,  333,  332,  331,  330,  329,  326,  324,  323,  322,

      321,  320,  319,  318,  317,  316,  315,  313,  312,  310,
      309,  308,  307,  306,  305,  303,  302,  297,  296,  289,
      288,  287,  286,  285,  284,  283,  282,  281,  280,  279,
      278,  276,  275,  274,  273,  272,  271,  270,  269,  268,
      267,  266,  265,  264,  263,  262,  261,  260,  259,  257,
      256,  255,  254,  253,  252,  250,  249,  248,  247,  246,
      245,  244,  243,  242,  240,  239,  238,  237,  236,  235,
      234,  233,  231,  230,  229,  228,  227,  226,  225,  224,
      223,  222,  221,  219,  218,  217,  216,  215,  213,  212,
      211,  210,  208,  207,  205,  204,  203,  202,  201,  200,

      199,  198,  197,  196,  195,  194,  193,  192,  186,  185,
      181,  180,  173,  172,  171,  170,  163,  162,  160,  156,
      155,  154,  153,  152,  151,  148,  147,  146,  145,  144,
      142,  141,  139,  137,  136,  134,  133,  131,  130,  128,
      127,  126,  125,  124,  121,  120,  119,  118,  117,  116,
      115,  113,  112,  111,  110,  109,  108,  106,  105,  102,
      101,  100,   99,   98,   97,   96,   95,   93,   92,   91,
       90,   89,   88,   86,   82,   56,   42,   40,   36,   27,
       26,   25,   22,   18,   14,   12,   11,    7,    6,    5,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,

     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "hlsl_lexer.ll"
#line 2 "hlsl_lexer.ll"
/*
 * Copyright © 2008, 2009 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include <ctype.h>
#include <limits.h>
#include "util/strtod.h"
#include "ast.h"
#include "glsl_parser_extras.h"
#include "hlsl_parser.h"

static int classify_identifier(struct _mesa_glsl_parse_state *, const char *);

#ifdef _MSC_VER
#define YY_NO_UNISTD_H
#endif

#define YY_USER_ACTION						\
   do {								\
      yylloc->first_column = yycolumn + 1;			\
      yylloc->first_line = yylloc->last_line = yylineno + 1;	\
      yycolumn += yyleng;					\
      yylloc->last_column = yycolumn + 1;			\
   } while(0);

#define YY_USER_INIT yylineno = 0; yycolumn = 0; yylloc->source = 0; yylloc->filename = yyextra->current_filename;

/* A macro for handling reserved words and keywords across language versions.
 *
 * Certain words start out as identifiers, become reserved words in
 * later language revisions, and finally become language keywords.
 * This may happen at different times in desktop GLSL and GLSL ES.
 *
 * For example, consider the following lexer rule:
 * samplerBuffer       KEYWORD(130, 0, 140, 0, SAMPLERBUFFER)
 *
 * This means that "samplerBuffer" will be treated as:
 * - a keyword (SAMPLERBUFFER token)         ...in GLSL >= 1.40
 * - a reserved word - error                 ...in GLSL >= 1.30
 * - an identifier                           ...in GLSL <  1.30 or GLSL ES
 */
#define KEYWORD(reserved_glsl, reserved_glsl_es,			\
                allowed_glsl, allowed_glsl_es, token)			\
   KEYWORD_WITH_ALT(reserved_glsl, reserved_glsl_es,			\
                    allowed_glsl, allowed_glsl_es, false, token)

/**
 * Like the KEYWORD macro, but the word is also treated as a keyword
 * if the given boolean expression is true.
 */
#define KEYWORD_WITH_ALT(reserved_glsl, reserved_glsl_es,		\
                         allowed_glsl, allowed_glsl_es,			\
                         alt_expr, token)				\
   do {									\
      if (yyextra->is_version(allowed_glsl, allowed_glsl_es)		\
          || (alt_expr)) {						\
	 return token;							\
      } else if (yyextra->is_version(reserved_glsl,			\
                                     reserved_glsl_es)) {		\
	 _mesa_glsl_error(yylloc, yyextra,				\
			  "illegal use of reserved word `%s'", yytext);	\
	 return ERROR_TOK;						\
      } else {								\
	 void *mem_ctx = yyextra;					\
	 yylval->identifier = ralloc_strdup(mem_ctx, yytext);		\
	 return classify_identifier(yyextra, yytext);			\
      }									\
   } while (0)

/**
 * A macro for handling keywords that have been present in GLSL since
 * its origin, but were changed into reserved words in GLSL 3.00 ES.
 */
#define DEPRECATED_ES_KEYWORD(token)					\
   do {									\
      if (yyextra->is_version(0, 300)) {				\
	 _mesa_glsl_error(yylloc, yyextra,				\
			  "illegal use of reserved word `%s'", yytext);	\
	 return ERROR_TOK;						\
      } else {								\
         return token;							\
      }									\
   } while (0)

static int
literal_integer(char *text, int len, struct _mesa_glsl_parse_state *state,
		YYSTYPE *lval, YYLTYPE *lloc, int base)
{
   bool is_uint = (text[len - 1] == 'u' ||
		   text[len - 1] == 'U');
   const char *digits = text;

   /* Skip "0x" */
   if (base == 16)
      digits += 2;

#ifdef _MSC_VER
   unsigned __int64 value = _strtoui64(digits, NULL, base);
#else
   unsigned long long value = strtoull(digits, NULL, base);
#endif

   lval->n = (int)value;

   if (value > UINT_MAX) {
      /* Note that signed 0xffffffff is valid, not out of range! */
      if (state->is_version(130, 300)) {
	 _mesa_glsl_error(lloc, state,
			  "literal value `%s' out of range", text);
      } else {
	 _mesa_glsl_warning(lloc, state,
			    "literal value `%s' out of range", text);
      }
   } else if (base == 10 && !is_uint && (unsigned)value > (unsigned)INT_MAX + 1) {
      /* Tries to catch unintentionally providing a negative value.
       * Note that -2147483648 is parsed as -(2147483648), so we don't
       * want to warn for INT_MAX.
       */
      _mesa_glsl_warning(lloc, state,
			 "signed literal value `%s' is interpreted as %d",
			 text, lval->n);
   }
   return is_uint ? UINTCONSTANT : INTCONSTANT;
}

#define LITERAL_INTEGER(base) \
   literal_integer(yytext, yyleng, yyextra, yylval, yylloc, base)

/* Note: When adding any start conditions to this list, you must also
* update the "Internal compiler error" catch-all rule near the end of
* this file. */

#line 1359 "hlsl_lexer.cpp"

#define INITIAL 0
#define PP 1
#define PRAGMA 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE struct _mesa_glsl_parse_state *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int _mesa_hlsl_lexer_lex_init (yyscan_t* scanner);

int _mesa_hlsl_lexer_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int _mesa_hlsl_lexer_lex_destroy (yyscan_t yyscanner );

int _mesa_hlsl_lexer_get_debug (yyscan_t yyscanner );

void _mesa_hlsl_lexer_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE _mesa_hlsl_lexer_get_extra (yyscan_t yyscanner );

void _mesa_hlsl_lexer_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *_mesa_hlsl_lexer_get_in (yyscan_t yyscanner );

void _mesa_hlsl_lexer_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *_mesa_hlsl_lexer_get_out (yyscan_t yyscanner );

void _mesa_hlsl_lexer_set_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t _mesa_hlsl_lexer_get_leng (yyscan_t yyscanner );

char *_mesa_hlsl_lexer_get_text (yyscan_t yyscanner );

int _mesa_hlsl_lexer_get_lineno (yyscan_t yyscanner );

void _mesa_hlsl_lexer_set_lineno (int line_number ,yyscan_t yyscanner );

int _mesa_hlsl_lexer_get_column  (yyscan_t yyscanner );

void _mesa_hlsl_lexer_set_column (int column_no ,yyscan_t yyscanner );

YYSTYPE * _mesa_hlsl_lexer_get_lval (yyscan_t yyscanner );

void _mesa_hlsl_lexer_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *_mesa_hlsl_lexer_get_lloc (yyscan_t yyscanner );
    
        void _mesa_hlsl_lexer_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int _mesa_hlsl_lexer_wrap (yyscan_t yyscanner );
#else
extern int _mesa_hlsl_lexer_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int _mesa_hlsl_lexer_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int _mesa_hlsl_lexer_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 171 "hlsl_lexer.ll"


#line 1608 "hlsl_lexer.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			_mesa_hlsl_lexer_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				_mesa_hlsl_lexer__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		_mesa_hlsl_lexer__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1229 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1228 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 173 "hlsl_lexer.ll"
;
	YY_BREAK
/* Preprocessor tokens. */ 
case 2:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 176 "hlsl_lexer.ll"
;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 177 "hlsl_lexer.ll"
{ BEGIN PP; return VERSION_TOK; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 178 "hlsl_lexer.ll"
{ BEGIN PP; return EXTENSION; }
	YY_BREAK
case 5:
/* rule 5 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 179 "hlsl_lexer.ll"
{
				   /* Eat characters until the first digit is
				    * encountered
				    */
				   char *ptr = yytext;
				   while (!isdigit(*ptr))
				      ptr++;

                   char *filename_start = NULL;
                   int lineno = strtol(ptr, &filename_start, 10);
                   yylineno = lineno - 2;  /* intentionally -2 so that the correct line number is stored, 
                                            * probably because of no \n at the end of the rule */

                   if (filename_start != NULL)
                   {
                        while (*filename_start != '\"' && *filename_start != '\0')
                            filename_start++;

                        if (*filename_start != '\0')
                            filename_start++;

                        const char *filename_end = filename_start;
                        while (*filename_end != '\"' && *filename_end != '\0')
                            filename_end++;

                        yylloc->filename = ralloc_strndup(yyextra, filename_start, filename_end - filename_start);
                   }
				}
	YY_BREAK
case 6:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 207 "hlsl_lexer.ll"
{
				   /* Eat characters until the first digit is
				    * encountered
				    */
				   char *ptr = yytext;
				   while (!isdigit(*ptr))
				      ptr++;

				   /* Subtract one from the line number because
				    * yylineno is zero-based instead of
				    * one-based.
				    */
				   yylineno = strtol(ptr, &ptr, 0) - 2;

				}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 222 "hlsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_DEBUG_ON;
				}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 226 "hlsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_DEBUG_OFF;
				}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 230 "hlsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_OPTIMIZE_ON;
				}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 234 "hlsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_OPTIMIZE_OFF;
				}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 238 "hlsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_INVARIANT_ALL;
				}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 242 "hlsl_lexer.ll"
{ BEGIN PRAGMA; }
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 244 "hlsl_lexer.ll"
{ BEGIN 0; yylineno++; yycolumn = 0; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 245 "hlsl_lexer.ll"
{ }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 247 "hlsl_lexer.ll"
{ }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 248 "hlsl_lexer.ll"
{ }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 249 "hlsl_lexer.ll"
return COLON;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 250 "hlsl_lexer.ll"
{
				   void *mem_ctx = yyextra;
				   yylval->identifier = ralloc_strdup(mem_ctx, yytext);
				   return IDENTIFIER;
				}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 255 "hlsl_lexer.ll"
{
				    yylval->n = strtol(yytext, NULL, 10);
				    return INTCONSTANT;
				}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 259 "hlsl_lexer.ll"
{ BEGIN 0; yylineno++; yycolumn = 0; return EOL; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 260 "hlsl_lexer.ll"
{ return yytext[0]; }
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 262 "hlsl_lexer.ll"
{ yylineno++; yycolumn = 0; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 264 "hlsl_lexer.ll"
DEPRECATED_ES_KEYWORD(ATTRIBUTE);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 265 "hlsl_lexer.ll"
return CONST_TOK;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 266 "hlsl_lexer.ll"
return BOOL_TOK;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 267 "hlsl_lexer.ll"
return FLOAT_TOK;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 268 "hlsl_lexer.ll"
return INT_TOK;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 269 "hlsl_lexer.ll"
KEYWORD(130, 300, 130, 300, UINT_TOK);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 271 "hlsl_lexer.ll"
return BREAK;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 272 "hlsl_lexer.ll"
return CONTINUE;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 273 "hlsl_lexer.ll"
return DO;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 274 "hlsl_lexer.ll"
return WHILE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 275 "hlsl_lexer.ll"
return ELSE;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 276 "hlsl_lexer.ll"
return FOR;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 277 "hlsl_lexer.ll"
return IF;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 278 "hlsl_lexer.ll"
return DISCARD;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 279 "hlsl_lexer.ll"
return RETURN;
	YY_BREAK
/* Non-square matrices are reversed due to GLSL column-majorness */
case 38:
YY_RULE_SETUP
#line 282 "hlsl_lexer.ll"
return BVEC2;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 283 "hlsl_lexer.ll"
return BVEC3;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 284 "hlsl_lexer.ll"
return BVEC4;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 285 "hlsl_lexer.ll"
return IVEC2;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 286 "hlsl_lexer.ll"
return IVEC3;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 287 "hlsl_lexer.ll"
return IVEC4;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 288 "hlsl_lexer.ll"
KEYWORD(130, 300, 130, 300, UVEC2);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 289 "hlsl_lexer.ll"
KEYWORD(130, 300, 130, 300, UVEC3);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 290 "hlsl_lexer.ll"
KEYWORD(130, 300, 130, 300, UVEC4);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 291 "hlsl_lexer.ll"
return VEC2;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 292 "hlsl_lexer.ll"
return VEC3;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 293 "hlsl_lexer.ll"
return VEC4;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 294 "hlsl_lexer.ll"
return MAT2X2;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 295 "hlsl_lexer.ll"
return MAT3X3;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 296 "hlsl_lexer.ll"
return MAT4X4;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 297 "hlsl_lexer.ll"
return MAT2X3;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 298 "hlsl_lexer.ll"
return MAT2X4;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 299 "hlsl_lexer.ll"
return MAT3X2;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 300 "hlsl_lexer.ll"
return MAT3X4;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 301 "hlsl_lexer.ll"
return MAT4X2;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 302 "hlsl_lexer.ll"
return MAT4X3;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 304 "hlsl_lexer.ll"
return IN_TOK;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 305 "hlsl_lexer.ll"
return OUT_TOK;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 306 "hlsl_lexer.ll"
return INOUT_TOK;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 307 "hlsl_lexer.ll"
return UNIFORM;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 308 "hlsl_lexer.ll"
DEPRECATED_ES_KEYWORD(VARYING);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 309 "hlsl_lexer.ll"
KEYWORD(120, 300, 120, 300, CENTROID);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 310 "hlsl_lexer.ll"
KEYWORD(120, 100, 120, 100, INVARIANT);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 311 "hlsl_lexer.ll"
KEYWORD(130, 100, 130, 300, FLAT);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 312 "hlsl_lexer.ll"
KEYWORD(130, 300, 130, 300, SMOOTH);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 313 "hlsl_lexer.ll"
KEYWORD(130, 300, 130, 0, NOPERSPECTIVE);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 315 "hlsl_lexer.ll"
return SAMPLER1D;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 316 "hlsl_lexer.ll"
return SAMPLER2D;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 317 "hlsl_lexer.ll"
return SAMPLER3D;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 318 "hlsl_lexer.ll"
return SAMPLERCUBE;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 319 "hlsl_lexer.ll"
KEYWORD(130, 300, 130, 0, SAMPLER1DARRAY);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 320 "hlsl_lexer.ll"
KEYWORD(130, 300, 130, 300, SAMPLER2DARRAY);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 321 "hlsl_lexer.ll"
DEPRECATED_ES_KEYWORD(SAMPLER1DSHADOW);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 322 "hlsl_lexer.ll"
return SAMPLER2DSHADOW;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 323 "hlsl_lexer.ll"
KEYWORD(130, 300, 130, 300, SAMPLERCUBESHADOW);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 324 "hlsl_lexer.ll"
KEYWORD(130, 300, 130, 0, SAMPLER1DARRAYSHADOW);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 325 "hlsl_lexer.ll"
KEYWORD(130, 300, 130, 300, SAMPLER2DARRAYSHADOW);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 326 "hlsl_lexer.ll"
KEYWORD(130, 300, 130, 0, ISAMPLER1D);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 327 "hlsl_lexer.ll"
KEYWORD(130, 300, 130, 300, ISAMPLER2D);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 328 "hlsl_lexer.ll"
KEYWORD(130, 300, 130, 300, ISAMPLER3D);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 329 "hlsl_lexer.ll"
KEYWORD(130, 300, 130, 300, ISAMPLERCUBE);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 330 "hlsl_lexer.ll"
KEYWORD(130, 300, 130, 0, ISAMPLER1DARRAY);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 331 "hlsl_lexer.ll"
KEYWORD(130, 300, 130, 300, ISAMPLER2DARRAY);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 332 "hlsl_lexer.ll"
KEYWORD(130, 300, 130, 0, USAMPLER1D);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 333 "hlsl_lexer.ll"
KEYWORD(130, 300, 130, 300, USAMPLER2D);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 334 "hlsl_lexer.ll"
KEYWORD(130, 300, 130, 300, USAMPLER3D);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 335 "hlsl_lexer.ll"
KEYWORD(130, 300, 130, 300, USAMPLERCUBE);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 336 "hlsl_lexer.ll"
KEYWORD(130, 300, 130, 0, USAMPLER1DARRAY);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 337 "hlsl_lexer.ll"
KEYWORD(130, 300, 130, 300, USAMPLER2DARRAY);
	YY_BREAK
/* additional keywords in ARB_texture_multisample, included in GLSL 1.50 */
/* these are reserved but not defined in GLSL 3.00 */
case 92:
YY_RULE_SETUP
#line 341 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(150, 300, 150, 0, yyextra->ARB_texture_multisample_enable, SAMPLER2DMS);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 342 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(150, 300, 150, 0, yyextra->ARB_texture_multisample_enable, ISAMPLER2DMS);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 343 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(150, 300, 150, 0, yyextra->ARB_texture_multisample_enable, USAMPLER2DMS);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 344 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(150, 300, 150, 0, yyextra->ARB_texture_multisample_enable, SAMPLER2DMSARRAY);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 345 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(150, 300, 150, 0, yyextra->ARB_texture_multisample_enable, ISAMPLER2DMSARRAY);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 346 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(150, 300, 150, 0, yyextra->ARB_texture_multisample_enable, USAMPLER2DMSARRAY);
	YY_BREAK
/* keywords available with ARB_texture_cube_map_array_enable extension on desktop GLSL */
case 98:
YY_RULE_SETUP
#line 349 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(400, 0, 400, 0, yyextra->ARB_texture_cube_map_array_enable, SAMPLERCUBEARRAY);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 350 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(400, 0, 400, 0, yyextra->ARB_texture_cube_map_array_enable, ISAMPLERCUBEARRAY);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 351 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(400, 0, 400, 0, yyextra->ARB_texture_cube_map_array_enable, USAMPLERCUBEARRAY);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 352 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(400, 0, 400, 0, yyextra->ARB_texture_cube_map_array_enable, SAMPLERCUBEARRAYSHADOW);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 354 "hlsl_lexer.ll"
{
			  if (yyextra->OES_EGL_image_external_enable)
			     return SAMPLEREXTERNALOES;
			  else
			     return IDENTIFIER;
		}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 361 "hlsl_lexer.ll"
return SAMPLERSTATE;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 362 "hlsl_lexer.ll"
return SAMPLERCOMPARISONSTATE;
	YY_BREAK
/* keywords available with ARB_gpu_shader5 */
case 105:
YY_RULE_SETUP
#line 365 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(400, 0, 400, 0, yyextra->ARB_gpu_shader5_enable, PRECISE);
	YY_BREAK
/* keywords available with ARB_shader_image_load_store */
case 106:
YY_RULE_SETUP
#line 368 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IMAGE1D);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 369 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IMAGE2D);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 370 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IMAGE3D);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 371 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IMAGE2DRECT);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 372 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IMAGECUBE);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 373 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IMAGEBUFFER);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 374 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IMAGE1DARRAY);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 375 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IMAGE2DARRAY);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 376 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IMAGECUBEARRAY);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 377 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IMAGE2DMS);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 378 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IMAGE2DMSARRAY);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 379 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IIMAGE1D);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 380 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IIMAGE2D);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 381 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IIMAGE3D);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 382 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IIMAGE2DRECT);
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 383 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IIMAGECUBE);
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 384 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IIMAGEBUFFER);
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 385 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IIMAGE1DARRAY);
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 386 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IIMAGE2DARRAY);
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 387 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IIMAGECUBEARRAY);
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 388 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IIMAGE2DMS);
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 389 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, IIMAGE2DMSARRAY);
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 390 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, UIMAGE1D);
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 391 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, UIMAGE2D);
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 392 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, UIMAGE3D);
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 393 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, UIMAGE2DRECT);
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 394 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, UIMAGECUBE);
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 395 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, UIMAGEBUFFER);
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 396 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, UIMAGE1DARRAY);
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 397 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, UIMAGE2DARRAY);
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 398 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, UIMAGECUBEARRAY);
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 399 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, UIMAGE2DMS);
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 400 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(130, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, UIMAGE2DMSARRAY);
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 401 "hlsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IMAGE1DSHADOW);
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 402 "hlsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IMAGE2DSHADOW);
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 403 "hlsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IMAGE1DARRAYSHADOW);
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 404 "hlsl_lexer.ll"
KEYWORD(130, 300, 0, 0, IMAGE2DARRAYSHADOW);
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 406 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(420, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, COHERENT);
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 407 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 420, 0, yyextra->ARB_shader_image_load_store_enable, VOLATILE);
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 408 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(420, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, RESTRICT);
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 409 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(420, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, READONLY);
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 410 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(420, 300, 420, 0, yyextra->ARB_shader_image_load_store_enable, WRITEONLY);
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 412 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(420, 300, 420, 310, yyextra->ARB_shader_atomic_counters_enable, ATOMIC_UINT);
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 414 "hlsl_lexer.ll"
return STRUCT;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 415 "hlsl_lexer.ll"
return VOID_TOK;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 417 "hlsl_lexer.ll"
{
		  if ((yyextra->is_version(140, 300))
		      || yyextra->AMD_conservative_depth_enable
		      || yyextra->ARB_conservative_depth_enable
		      || yyextra->ARB_explicit_attrib_location_enable
		      || yyextra->ARB_explicit_uniform_location_enable
                      || yyextra->has_separate_shader_objects()
		      || yyextra->ARB_uniform_buffer_object_enable
		      || yyextra->ARB_fragment_coord_conventions_enable
                      || yyextra->ARB_shading_language_420pack_enable
                      || yyextra->ARB_compute_shader_enable) {
		      return LAYOUT_TOK;
		   } else {
		      void *mem_ctx = yyextra;
		      yylval->identifier = ralloc_strdup(mem_ctx, yytext);
		      return classify_identifier(yyextra, yytext);
		   }
		}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 436 "hlsl_lexer.ll"
return INC_OP;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 437 "hlsl_lexer.ll"
return DEC_OP;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 438 "hlsl_lexer.ll"
return LE_OP;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 439 "hlsl_lexer.ll"
return GE_OP;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 440 "hlsl_lexer.ll"
return EQ_OP;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 441 "hlsl_lexer.ll"
return NE_OP;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 442 "hlsl_lexer.ll"
return AND_OP;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 443 "hlsl_lexer.ll"
return OR_OP;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 444 "hlsl_lexer.ll"
return XOR_OP;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 445 "hlsl_lexer.ll"
return LEFT_OP;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 446 "hlsl_lexer.ll"
return RIGHT_OP;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 448 "hlsl_lexer.ll"
return MUL_ASSIGN;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 449 "hlsl_lexer.ll"
return DIV_ASSIGN;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 450 "hlsl_lexer.ll"
return ADD_ASSIGN;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 451 "hlsl_lexer.ll"
return MOD_ASSIGN;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 452 "hlsl_lexer.ll"
return LEFT_ASSIGN;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 453 "hlsl_lexer.ll"
return RIGHT_ASSIGN;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 454 "hlsl_lexer.ll"
return AND_ASSIGN;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 455 "hlsl_lexer.ll"
return XOR_ASSIGN;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 456 "hlsl_lexer.ll"
return OR_ASSIGN;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 457 "hlsl_lexer.ll"
return SUB_ASSIGN;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 459 "hlsl_lexer.ll"
{
			    return LITERAL_INTEGER(10);
			}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 462 "hlsl_lexer.ll"
{
			    return LITERAL_INTEGER(16);
			}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 465 "hlsl_lexer.ll"
{
			    return LITERAL_INTEGER(8);
			}
	YY_BREAK
case 176:
#line 470 "hlsl_lexer.ll"
case 177:
#line 471 "hlsl_lexer.ll"
case 178:
#line 472 "hlsl_lexer.ll"
case 179:
YY_RULE_SETUP
#line 472 "hlsl_lexer.ll"
{
			    yylval->real = _mesa_strtof(yytext, NULL);
			    return FLOATCONSTANT;
			}
	YY_BREAK
case 180:
#line 478 "hlsl_lexer.ll"
case 181:
#line 479 "hlsl_lexer.ll"
case 182:
#line 480 "hlsl_lexer.ll"
case 183:
YY_RULE_SETUP
#line 480 "hlsl_lexer.ll"
{
			    if (!yyextra->is_version(400, 0) &&
			        !yyextra->ARB_gpu_shader_fp64_enable)
			        return ERROR_TOK;
			    yylval->dreal = _mesa_strtod(yytext, NULL);
			    return DOUBLECONSTANT;
			}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 488 "hlsl_lexer.ll"
{
			    yylval->n = 1;
			    return BOOLCONSTANT;
			}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 492 "hlsl_lexer.ll"
{
			    yylval->n = 0;
			    return BOOLCONSTANT;
			}
	YY_BREAK
/* Reserved words in GLSL 1.10. */
case 186:
YY_RULE_SETUP
#line 499 "hlsl_lexer.ll"
KEYWORD(110, 100, 0, 0, ASM);
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 500 "hlsl_lexer.ll"
KEYWORD(110, 100, 0, 0, CLASS);
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 501 "hlsl_lexer.ll"
KEYWORD(110, 100, 0, 0, UNION);
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 502 "hlsl_lexer.ll"
KEYWORD(110, 100, 0, 0, ENUM);
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 503 "hlsl_lexer.ll"
KEYWORD(110, 100, 0, 0, TYPEDEF);
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 504 "hlsl_lexer.ll"
KEYWORD(110, 100, 0, 0, TEMPLATE);
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 505 "hlsl_lexer.ll"
KEYWORD(110, 100, 0, 0, THIS);
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 506 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 140, 300, yyextra->ARB_uniform_buffer_object_enable, PACKED_TOK);
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 507 "hlsl_lexer.ll"
KEYWORD(110, 100, 0, 0, GOTO);
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 508 "hlsl_lexer.ll"
KEYWORD(110, 100, 130, 300, SWITCH);
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 509 "hlsl_lexer.ll"
KEYWORD(110, 100, 130, 300, DEFAULT);
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 510 "hlsl_lexer.ll"
KEYWORD(110, 100, 0, 0, INLINE_TOK);
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 511 "hlsl_lexer.ll"
KEYWORD(110, 100, 0, 0, NOINLINE);
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 512 "hlsl_lexer.ll"
KEYWORD(110, 100, 0, 0, PUBLIC_TOK);
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 513 "hlsl_lexer.ll"
return STATIC;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 514 "hlsl_lexer.ll"
KEYWORD(110, 100, 0, 0, EXTERN);
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 515 "hlsl_lexer.ll"
KEYWORD(110, 100, 0, 0, EXTERNAL);
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 516 "hlsl_lexer.ll"
KEYWORD(110, 100, 0, 0, INTERFACE);
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 517 "hlsl_lexer.ll"
KEYWORD(110, 100, 0, 0, LONG_TOK);
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 518 "hlsl_lexer.ll"
KEYWORD(110, 100, 0, 0, SHORT_TOK);
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 519 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DOUBLE_TOK);
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 520 "hlsl_lexer.ll"
KEYWORD(110, 100, 0, 0, HALF);
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 521 "hlsl_lexer.ll"
KEYWORD(110, 100, 0, 0, FIXED_TOK);
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 522 "hlsl_lexer.ll"
KEYWORD(110, 100, 0, 0, UNSIGNED);
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 523 "hlsl_lexer.ll"
KEYWORD(110, 100, 0, 0, HVEC2);
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 524 "hlsl_lexer.ll"
KEYWORD(110, 100, 0, 0, HVEC3);
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 525 "hlsl_lexer.ll"
KEYWORD(110, 100, 0, 0, HVEC4);
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 526 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DVEC2);
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 527 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DVEC3);
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 528 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DVEC4);
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 529 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT2X2);
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 530 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT3X3);
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 531 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT4X4);
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 532 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT2X3);
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 533 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT2X4);
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 534 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT3X2);
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 535 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT3X4);
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 536 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT4X2);
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 537 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(110, 100, 400, 0, yyextra->ARB_gpu_shader_fp64_enable, DMAT4X3);
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 538 "hlsl_lexer.ll"
KEYWORD(110, 100, 0, 0, FVEC2);
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 539 "hlsl_lexer.ll"
KEYWORD(110, 100, 0, 0, FVEC3);
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 540 "hlsl_lexer.ll"
KEYWORD(110, 100, 0, 0, FVEC4);
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 541 "hlsl_lexer.ll"
DEPRECATED_ES_KEYWORD(SAMPLER2DRECT);
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 542 "hlsl_lexer.ll"
KEYWORD(110, 100, 0, 0, SAMPLER3DRECT);
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 543 "hlsl_lexer.ll"
DEPRECATED_ES_KEYWORD(SAMPLER2DRECTSHADOW);
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 544 "hlsl_lexer.ll"
KEYWORD(110, 100, 0, 0, SIZEOF);
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 545 "hlsl_lexer.ll"
KEYWORD(110, 100, 0, 0, CAST);
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 546 "hlsl_lexer.ll"
KEYWORD(110, 100, 0, 0, NAMESPACE);
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 547 "hlsl_lexer.ll"
KEYWORD(110, 100, 0, 0, USING);
	YY_BREAK
/* Additional reserved words in GLSL 1.20. */
case 235:
YY_RULE_SETUP
#line 550 "hlsl_lexer.ll"
KEYWORD(120, 100, 130, 100, LOWP);
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 551 "hlsl_lexer.ll"
KEYWORD(120, 100, 130, 100, MEDIUMP);
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 552 "hlsl_lexer.ll"
KEYWORD(120, 100, 130, 100, HIGHP);
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 553 "hlsl_lexer.ll"
KEYWORD(120, 100, 130, 100, PRECISION);
	YY_BREAK
/* Additional reserved words in GLSL 1.30. */
case 239:
YY_RULE_SETUP
#line 556 "hlsl_lexer.ll"
KEYWORD(130, 300, 130, 300, CASE);
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 557 "hlsl_lexer.ll"
KEYWORD(130, 300, 0, 0, COMMON);
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 558 "hlsl_lexer.ll"
KEYWORD(130, 300, 0, 0, PARTITION);
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 559 "hlsl_lexer.ll"
KEYWORD(130, 300, 0, 0, ACTIVE);
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 560 "hlsl_lexer.ll"
KEYWORD(130, 100, 0, 0, SUPERP);
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 561 "hlsl_lexer.ll"
KEYWORD(130, 300, 140, 0, BUFFER);
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 562 "hlsl_lexer.ll"
KEYWORD(130, 300, 0, 0, FILTER);
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 563 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(130, 0, 140, 0, yyextra->ARB_uniform_buffer_object_enable && !yyextra->es_shader, ROW_MAJOR);
	YY_BREAK
/* Additional reserved words in GLSL 1.40 */
case 247:
YY_RULE_SETUP
#line 566 "hlsl_lexer.ll"
KEYWORD(140, 300, 140, 0, ISAMPLER2DRECT);
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 567 "hlsl_lexer.ll"
KEYWORD(140, 300, 140, 0, USAMPLER2DRECT);
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 568 "hlsl_lexer.ll"
KEYWORD(140, 300, 140, 0, ISAMPLERBUFFER);
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 569 "hlsl_lexer.ll"
KEYWORD(140, 300, 140, 0, USAMPLERBUFFER);
	YY_BREAK
/* Additional reserved words in GLSL ES 3.00 */
case 251:
YY_RULE_SETUP
#line 572 "hlsl_lexer.ll"
KEYWORD(0, 300, 0, 0, RESOURCE);
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 573 "hlsl_lexer.ll"
KEYWORD(0, 300, 0, 0, PATCH);
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 574 "hlsl_lexer.ll"
KEYWORD_WITH_ALT(400, 300, 400, 0, yyextra->ARB_gpu_shader5_enable, SAMPLE);
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 575 "hlsl_lexer.ll"
KEYWORD(0, 300, 0, 0, SUBROUTINE);
	YY_BREAK
/* HLSL keywords */
case 255:
YY_RULE_SETUP
#line 578 "hlsl_lexer.ll"
KEYWORD(0, 0, 300, 300, CBUFFER);
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 579 "hlsl_lexer.ll"
KEYWORD(0, 0, 300, 300, TBUFFER);
	YY_BREAK
/* HLSL annotations, silently eat them */
case 257:
YY_RULE_SETUP
#line 582 "hlsl_lexer.ll"
;
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 583 "hlsl_lexer.ll"
;
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 584 "hlsl_lexer.ll"
;
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 585 "hlsl_lexer.ll"
;
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 586 "hlsl_lexer.ll"
;
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 587 "hlsl_lexer.ll"
;
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 588 "hlsl_lexer.ll"
;
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 589 "hlsl_lexer.ll"
;
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 590 "hlsl_lexer.ll"
;
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 591 "hlsl_lexer.ll"
;
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 592 "hlsl_lexer.ll"
;
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 593 "hlsl_lexer.ll"
;
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 594 "hlsl_lexer.ll"
;
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 595 "hlsl_lexer.ll"
;
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 596 "hlsl_lexer.ll"
;
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 597 "hlsl_lexer.ll"
;
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 598 "hlsl_lexer.ll"
;
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 600 "hlsl_lexer.ll"
{
			    struct _mesa_glsl_parse_state *state = yyextra;
			    void *ctx = state;	
			    if (state->es_shader && strlen(yytext) > 1024) {
			       _mesa_glsl_error(yylloc, state,
			                        "Identifier `%s' exceeds 1024 characters",
			                        yytext);
			    } else {
			      yylval->identifier = ralloc_strdup(ctx, yytext);
			    }
			    return classify_identifier(state, yytext);
			}
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 613 "hlsl_lexer.ll"
{ return yytext[0]; }
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 615 "hlsl_lexer.ll"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3198 "hlsl_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PP):
case YY_STATE_EOF(PRAGMA):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * _mesa_hlsl_lexer_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( _mesa_hlsl_lexer_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of _mesa_hlsl_lexer_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					_mesa_hlsl_lexer_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			_mesa_hlsl_lexer_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) _mesa_hlsl_lexer_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1229 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1229 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1228);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					_mesa_hlsl_lexer_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( _mesa_hlsl_lexer_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void _mesa_hlsl_lexer_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        _mesa_hlsl_lexer_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            _mesa_hlsl_lexer__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	_mesa_hlsl_lexer__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	_mesa_hlsl_lexer__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void _mesa_hlsl_lexer__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		_mesa_hlsl_lexer_pop_buffer_state();
	 *		_mesa_hlsl_lexer_push_buffer_state(new_buffer);
     */
	_mesa_hlsl_lexer_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	_mesa_hlsl_lexer__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (_mesa_hlsl_lexer_wrap()) processing, but the only time this flag
	 * is looked at is after _mesa_hlsl_lexer_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void _mesa_hlsl_lexer__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE _mesa_hlsl_lexer__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) _mesa_hlsl_lexer_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in _mesa_hlsl_lexer__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) _mesa_hlsl_lexer_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in _mesa_hlsl_lexer__create_buffer()" );

	b->yy_is_our_buffer = 1;

	_mesa_hlsl_lexer__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with _mesa_hlsl_lexer__create_buffer()
 * @param yyscanner The scanner object.
 */
    void _mesa_hlsl_lexer__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		_mesa_hlsl_lexer_free((void *) b->yy_ch_buf ,yyscanner );

	_mesa_hlsl_lexer_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a _mesa_hlsl_lexer_restart() or at EOF.
 */
    static void _mesa_hlsl_lexer__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	_mesa_hlsl_lexer__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then _mesa_hlsl_lexer__init_buffer was _probably_
     * called from _mesa_hlsl_lexer_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void _mesa_hlsl_lexer__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		_mesa_hlsl_lexer__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void _mesa_hlsl_lexer_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	_mesa_hlsl_lexer_ensure_buffer_stack(yyscanner);

	/* This block is copied from _mesa_hlsl_lexer__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from _mesa_hlsl_lexer__switch_to_buffer. */
	_mesa_hlsl_lexer__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void _mesa_hlsl_lexer_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	_mesa_hlsl_lexer__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		_mesa_hlsl_lexer__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void _mesa_hlsl_lexer_ensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)_mesa_hlsl_lexer_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in _mesa_hlsl_lexer_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)_mesa_hlsl_lexer_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in _mesa_hlsl_lexer_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE _mesa_hlsl_lexer__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) _mesa_hlsl_lexer_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in _mesa_hlsl_lexer__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	_mesa_hlsl_lexer__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to _mesa_hlsl_lexer_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       _mesa_hlsl_lexer__scan_bytes() instead.
 */
YY_BUFFER_STATE _mesa_hlsl_lexer__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return _mesa_hlsl_lexer__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to _mesa_hlsl_lexer_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE _mesa_hlsl_lexer__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) _mesa_hlsl_lexer_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in _mesa_hlsl_lexer__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = _mesa_hlsl_lexer__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in _mesa_hlsl_lexer__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE _mesa_hlsl_lexer_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int _mesa_hlsl_lexer_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int _mesa_hlsl_lexer_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *_mesa_hlsl_lexer_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *_mesa_hlsl_lexer_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t _mesa_hlsl_lexer_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *_mesa_hlsl_lexer_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void _mesa_hlsl_lexer_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void _mesa_hlsl_lexer_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "_mesa_hlsl_lexer_set_lineno called with no buffer" );
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void _mesa_hlsl_lexer_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "_mesa_hlsl_lexer_set_column called with no buffer" );
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see _mesa_hlsl_lexer__switch_to_buffer
 */
void _mesa_hlsl_lexer_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void _mesa_hlsl_lexer_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int _mesa_hlsl_lexer_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void _mesa_hlsl_lexer_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * _mesa_hlsl_lexer_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void _mesa_hlsl_lexer_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *_mesa_hlsl_lexer_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void _mesa_hlsl_lexer_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* _mesa_hlsl_lexer_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int _mesa_hlsl_lexer_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) _mesa_hlsl_lexer_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* _mesa_hlsl_lexer_lex_init_extra has the same functionality as _mesa_hlsl_lexer_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to _mesa_hlsl_lexer_alloc in
 * the yyextra field.
 */

int _mesa_hlsl_lexer_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    _mesa_hlsl_lexer_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) _mesa_hlsl_lexer_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    _mesa_hlsl_lexer_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from _mesa_hlsl_lexer_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * _mesa_hlsl_lexer_lex_init()
     */
    return 0;
}

/* _mesa_hlsl_lexer_lex_destroy is for both reentrant and non-reentrant scanners. */
int _mesa_hlsl_lexer_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		_mesa_hlsl_lexer__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		_mesa_hlsl_lexer_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	_mesa_hlsl_lexer_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        _mesa_hlsl_lexer_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * _mesa_hlsl_lexer_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    _mesa_hlsl_lexer_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *_mesa_hlsl_lexer_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *_mesa_hlsl_lexer_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void _mesa_hlsl_lexer_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see _mesa_hlsl_lexer_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 615 "hlsl_lexer.ll"



int
classify_identifier(struct _mesa_glsl_parse_state *state, const char *name)
{
   if (state->symbols->get_variable(name) || state->symbols->get_function(name))
      return IDENTIFIER;
   else if (state->symbols->get_type(name))
      return TYPE_IDENTIFIER;
   else
      return NEW_IDENTIFIER;
}

void
_mesa_hlsl_lexer_ctor(struct _mesa_glsl_parse_state *state, const char *string)
{
   _mesa_hlsl_lexer_lex_init_extra(state,& state->scanner);
   _mesa_hlsl_lexer__scan_string(string,state->scanner);
}

void
_mesa_hlsl_lexer_dtor(struct _mesa_glsl_parse_state *state)
{
   _mesa_hlsl_lexer_lex_destroy(state->scanner);
}

